<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_beam_hitbox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>obj_bullettarget</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// todo: replace parent with obj_lasertarget or something similar
event_inherited();

// configurable variables
b_img = spr_beam;          // the beam itself
f_img = spr_beam_flash;    // the beginning of the beam
h_img = spr_beam_head;      // the end of the beam
b_spd = 8;
direction = 270;
image_xscale = 0;
image_angle = direction;

// image control vars, don't touch these
b_subimg = 0; b_alpha = 1;
f_subimg = 0; f_alpha = 1;
h_subimg = 0; h_alpha = 1;
b_subimg_max = sprite_get_number(b_img)-1;
f_subimg_max = sprite_get_number(f_img)-1;
h_subimg_max = sprite_get_number(h_img)-1;
b_width = sprite_get_width(b_img);
h_width = sprite_get_xoffset(h_img);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if b_alpha &gt; 0.05
    {
    b_alpha -= 0.05;
    h_alpha -= 0.05;
    }
else
    {
    if f_alpha &gt; 0.05 then f_alpha -= 0.05 else instance_destroy();
    }
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = direction;
//if mouse_check_button(mb_left) &amp;&amp; image_xscale &lt; 320 then image_xscale += 1;
//if mouse_check_button(mb_right) &amp;&amp; image_xscale &gt; 0 then image_xscale -= 1;

if image_xscale &lt; 320 then image_xscale += b_spd 
else 
    {
    if alarm[0] = -1 then alarm[0] = 30;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// debug line
//draw_self();

// laser draw stack
if image_xscale &lt; 1 then exit;

var i,in;
in = floor(b_subimg);
for(i=0; i&lt;image_xscale-32;i+=b_width)
    {
    var xx,yy,ss;
    xx = x + lengthdir_x(i, image_angle);
    yy = y + lengthdir_y(i, image_angle);
    draw_sprite_ext(b_img,in,xx,yy,1,image_yscale,image_angle,image_blend,b_alpha);
    in += 1; if in &gt; b_subimg_max then in = 0;
    }

// laser head (end of laser)
var hl,hx,hy;
if image_xscale &gt; 32
    {
    hl = max(h_width,image_xscale);
    hx = x + lengthdir_x(hl, image_angle);
    hy = y + lengthdir_y(hl, image_angle);
    draw_sprite_ext(h_img,h_subimg,hx,hy,1,1,image_angle,image_blend,h_alpha);
    }
else
    {
    hl = 4; // 36 (sprite width) - 32 (sprite xoffset)
    hx = x + lengthdir_x(hl, image_angle) - lengthdir_x(10,image_angle - 90);
    hy = y + lengthdir_y(hl, image_angle) - lengthdir_y(10,image_angle - 90);
    draw_sprite_general(h_img,h_subimg,clamp(36-image_xscale,0,36),0,clamp(image_xscale,0,36),20,hx,hy,1,1,image_angle,image_blend,image_blend,image_blend,image_blend,h_alpha);
    }

// laser flash (start of laser)
if sprite_exists(f_img) then draw_sprite_ext(f_img,f_subimg,x,y,1,1,image_angle,image_blend,f_alpha);

// Image indexes
b_subimg += 0.25; if b_subimg &gt; b_subimg_max then b_subimg = 0; // beam
h_subimg += 0.25; if h_subimg &gt; h_subimg_max then h_subimg = 0; // head
f_subimg += 0.25; if f_subimg &gt; f_subimg_max then f_subimg = 2; // flash
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
