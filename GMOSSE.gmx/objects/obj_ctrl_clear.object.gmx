<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.pausable = 0;
timer = 0;
txt_alpha = 0;
bkg_alpha = 0;
enabled = 0;
stage = scr_check_stage();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Kick off stage clear event
if instance_exists(obj_player)
    {
    with obj_ctrl_music event_user(4); // stage clear music

    p = instance_create(obj_player.x,obj_player.y,obj_player_clear);
    p.sprite_index = obj_player.sprite_index;
    p.image_angle = obj_player.image_angle;
    p.image_speed = obj_player.image_speed;

    with obj_player instance_destroy();
    with obj_hitbox instance_destroy();
    enabled = 1;
    }
    
// Continue from here only if player is "disposed of"
if !enabled exit;
timer += 1;
if timer = 390  
    {
    scr_basicshot(p.x,p.y,obj_player_clear2,1.25,0);
    scr_basicshot(p.x,p.y,obj_player_clear2,2,0);
    scr_basicshot(p.x,p.y,obj_player_clear2,3,0);
    scr_basicshot(p.x,p.y,obj_player_clear2,4,0);
    scr_basicshot(p.x,p.y,obj_player_clear2,5,0);
    scr_basicshot(p.x,p.y,obj_player_clear2,1.25,180);
    scr_basicshot(p.x,p.y,obj_player_clear2,2,180);
    scr_basicshot(p.x,p.y,obj_player_clear2,3,180);
    scr_basicshot(p.x,p.y,obj_player_clear2,4,180);
    scr_basicshot(p.x,p.y,obj_player_clear2,5,180);
    with obj_player_clear2 image_angle = 0;
    }
        
if timer = 550 
    {
    switch global.level
        {
        case -11:
            {
            scr_trans(rm_omake2,3,c_black,0.025,0.05,210);
            break;
            }
        case -1: // Boss 1
            {
            scr_trans(rm_boss2,3,c_black,0.025,0.05,210);
            break;
            }
        case 1: // Stage 1
            {
            scr_trans(rm_stage2,3,c_black,0.025,0.05,210);
            break;
            }
        /*case 2: // Stage 2
            {
            scr_trans(rm_stage3,3,c_black,0.025,0.05,210);
            break;
            }*/
        default: // Test rooms, etc
            {
            global.gamecomplete = 1;
            instance_create(x,y,obj_ctrl_gameover);
            break;
            }
        }
    }  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// GMS draw_set_alpha applies to sprites too, ensure we get existing alpha and set it back
var old_alpha; old_alpha = draw_get_alpha();

// Draw black box to cover stage background
draw_set_alpha(bkg_alpha);
draw_set_color(c_black);
draw_rectangle(xview,yview,xview+240,yview+320,0);
if bkg_alpha &lt; 1 then bkg_alpha += 0.1;

// Draw stage clear text
draw_set_alpha(txt_alpha);
scr_draw_vars(global.fnt_big,fa_center,c_white);
if timer &gt; 140 &amp;&amp; txt_alpha &lt; 1 then txt_alpha += 0.01;
draw_text(xview+120,yview+70,"STAGE "+string(stage)+" CLEAR!");

// Return screen alpha to previous values
draw_set_alpha(old_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
