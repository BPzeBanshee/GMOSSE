<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bh</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>obj_player</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Variables that are used in the step function need to be called here
and assigned a variable first. 
*/
/* WEAPON/TIMER VARS */
shot_angle = 0;
shot_angle_add = 1;

can_shoot = 1;
can_shoot2 = 1;
can_shoot_bomb = 1;

/* SPEED VARS */
/* 
Personally I keep diagonal move speeds the same as the 
shipspeed but this is customisable to tailor to your needs. 
Apparently limiting diagonal speed is a common thing 
in shmups but I've never really noticed or liked it.
*/
global.shipspeed = 1;
global.slowshipspeed = 1;

/* OPTION VARS */
switch global.optiontype
    {
    default: option_t1 = obj_bh_type1; option_t2 = obj_bh_type1; break;
    case 2: option_t1 = obj_bh_type2; option_t2 = obj_bh_type2; break;
    case 3: option_t1 = obj_bh_type3; option_t2 = obj_bh_type3; break;
    case 4: option_t1 = obj_bh_type4; option_t2 = obj_bh_type4; break;
    case 5: option_t1 = obj_bh_type5; option_t2 = obj_bh_type5; break;
    case 6: option_t1 = obj_bh_type6a; option_t2 = obj_bh_type6b; break;
    case 7: option_t1 = obj_bh_type7a; option_t2 = obj_bh_type7b; break;
    }
weapon = global.weapontype;
shootingtime = 0;
image_timer = 0;
speed_gear = 1;
thrust_scale = 0.25;
speed_up = 1;
can_speed = 1;

option1 = instance_create(x,y,option_t1);
option1.position = 1;
option1.direction = 90;
option2 = instance_create(x,y,option_t2);
option2.position = 2;
option2.direction = 90;

/* AESTHETIC VARS */
instance_create(x,y,obj_bh_trace);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_shoot2 = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_shoot = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* COMPUSLORY EVENT */
event_inherited();

// Generation of trace
if !instance_exists(obj_bh_trace)
    {
    option1 = instance_create(x,y,option_t1);
    option1.position = 1;
    option1.direction = 90;
    option2 = instance_create(x,y,option_t2);
    option2.position = 2;
    option2.direction = 90;
    instance_create(x,y,obj_bh_trace);
    }
    
// image aesthetics
afterimage = -666;
image_timer += 1;
if image_timer &gt;= 5
    {
    thrust = scr_basicshot(x,y+10,obj_bh_thrust,4,270+random_range(-10,10));
    thrust.image_xscale = thrust_scale*2;
    thrust.image_yscale = thrust_scale*2;
    image_timer = 0;
    }

// shoot code
// button 1
if global.button1
    {
    if can_shoot = 1 // Main shot
        {
        scr_playsnd(snd_bh_mainshot,1);
        shot = scr_basicshot(x,y,obj_bh_mainshot,20,90+shot_angle);
        shot.image_blend = obj_bh_orb.image_blend;

        if shot_angle_add = 1 then shot_angle += 1 else shot_angle -= 1;
        if shot_angle &gt; 3 || shot_angle &lt; -3
            {
            shot_angle = 0;
            shot_angle_add = !shot_angle_add; // binary invert
            }
        can_shoot = 0;
        alarm[0] = 4;
        }
    if can_shoot2 = 1 // Side orb shot
        {
        with obj_bh_orb event_user(0);
        switch weapon
            {
            case 1: alarm[1]=5; break;
            case 2: alarm[1]=5; break;
            case 3: alarm[1]=6; break;
            case 4: alarm[1]=30; break;
            case 5: alarm[1]=5; break;
            case 6: alarm[1]=3; break;
            case 7: alarm[1]=20; break;
            }
        can_shoot2 = 0;
        }
    }

//button 3 (speed gear setting)
if (global.button3 &amp;&amp; can_speed) 
    {
    can_speed = 0;
    if speed_up = 1 then speed_gear += 1 else speed_gear -= 1;
    switch speed_gear
        {
        case 1: global.shipspeed = 1; thrust_scale = 0.25; speed_up = 1; break;
        case 2: global.shipspeed = 3; thrust_scale = 0.5; break;
        case 3: global.shipspeed = 5; thrust_scale = 0.75; break;
        case 4: global.shipspeed = 7; thrust_scale = 1; speed_up = 0; break;
        }
    global.slowshipspeed = global.shipspeed;
    }
if (!global.button3) then can_speed = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
