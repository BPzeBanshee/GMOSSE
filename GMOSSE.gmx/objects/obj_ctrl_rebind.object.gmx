<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// deactivates standard inputs in case of interference
instance_deactivate_object(obj_ctrl_input);

// variable initialisation
mode = 1;
timer = 0;
msg = "";
joy_key = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_activate_object(obj_ctrl_input);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* 
this is where the gamepad check stuff happens.
the timer check is to stop the user assigning
multiple commands to the same button by accident
(something I've seen in some programs before).
keyboard_key == 0 is when nothing is pressed.
forcing it to 0 is another anti-accident measure.
the exists and id checks is to keep the game
responsive if it cant find a joystick.
*/

if !gamepad_is_connected(global.joy_id) then mode = 6;

switch mode
    {
    case 1: msg = "Press a key for SHOT"; break;
    case 2: msg = "Press a key for BOMB"; break;
    case 3: msg = "Press a key for FOCUS"; break;
    case 4: msg = "Press a key for PAUSE"; break;
    case 5: instance_destroy(); break;
    case 6: msg = "Joystick not found!"; break; // error
    }

timer += 1;
if timer &gt; 30
    {
    if mode &lt; 6
        {
        for (i=0;i&lt;gamepad_button_count(global.joy_id);i+=1) 
            {
            if gamepad_button_check(global.joy_id,i) then joy_key = i;
            }
        if joy_key &lt; 1 exit;
            switch mode
            {
            case 1: global.joy1 = joy_key; break;
            case 2: global.joy2 = joy_key; break;
            case 3: global.joy3 = joy_key; break;
            case 4: global.joy4 = joy_key; break;
            }
        mode += 1;
        timer = 0;
        joy_key = 0;
        }
    else if timer = 60 instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// this is where the keyboard check stuff happens
// the timer check is to stop the user assigning
// multiple commands to the same button by accident
// (something I've seen in some programs before).
// keyboard_key = 0 is when nothing is pressed.
// forcing it to 0 is another anti-accident measure.
// the exists and id checks is to keep the game
// responsive if it cant find a joystick.

if !joystick_exists(global.joy_id) then mode = 6;

switch mode
    {
    case 1: msg = "Press a key for SHOT"; break;
    case 2: msg = "Press a key for BOMB"; break;
    case 3: msg = "Press a key for FOCUS"; break;
    case 4: msg = "Press a key for PAUSE"; break;
    case 5: instance_activate_object(obj_ctrl_input); instance_destroy(); break;
    case 6: msg = "Joystick not found!"; break; // error
    }

timer += 1;
if timer &gt; 30 &amp;&amp; mode &lt; 6
    {
    for (i=0;i&lt;=joystick_buttons(global.joy_id);i+=1) 
        {
        if joystick_check_button(global.joy_id,i) then joy_key = i;
        }
    if joy_key &lt; 1 exit;
        switch mode
        {
        case 1: global.joy1 = joy_key; break;
        case 2: global.joy2 = joy_key; break;
        case 3: global.joy3 = joy_key; break;
        case 4: global.joy4 = joy_key; break;
        }
    mode += 1;
    timer = 0;
    joy_key = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// this is where the keyboard check stuff happens
// the timer check is to stop the user assigning
// multiple commands to the same button by accident
// (something I've seen in some programs before).
// keyboard_key = 0 is when nothing is pressed.
// forcing it to 0 is another anti-accident measure.

switch mode
    {
    case 1: msg = "Press a key for UP"; global.keycode_up = keyboard_key; break;
    case 2: msg = "Press a key for DOWN"; global.keycode_down = keyboard_key; break;
    case 3: msg = "Press a key for LEFT"; global.keycode_left = keyboard_key; break;
    case 4: msg = "Press a key for RIGHT"; global.keycode_right = keyboard_key; break;
    case 5: msg = "Press a key for SHOT"; global.keycode_button1 = keyboard_key; break;
    case 6: msg = "Press a key for BOMB"; global.keycode_button2 = keyboard_key; break;
    case 7: msg = "Press a key for FOCUS"; global.keycode_button3 = keyboard_key; break;
    case 8: msg = "Press a key for PAUSE"; global.keycode_button4 = keyboard_key; break;
    case 9: instance_activate_object(obj_ctrl_input); instance_destroy(); break;
    }
    
timer += 1;
if timer &gt; 30 &amp;&amp; keyboard_key != 0
    {
    mode += 1;
    keyboard_key = 0;
    timer = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.5);
draw_set_color(c_black);
draw_rectangle(xview+40,yview+260,xview+200,yview+290,0);

draw_set_font(global.fnt_default); // sets the font
draw_set_halign(fa_center); // centers the text
draw_set_color(make_color_rgb(90,90,255)); // sets the colour to blue
draw_set_alpha(1);
draw_text(xview+120,yview+270,string(msg)); // draws the message
if control = 2 draw_text(xview+120,yview+280,"ID (joystick_*): "+string(global.joy_id));
if control = 3 draw_text(xview+120,yview+280,"ID (gamepad_*): "+string(global.joy_id));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
