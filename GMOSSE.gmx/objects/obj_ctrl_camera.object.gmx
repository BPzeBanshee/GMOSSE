<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
TODO:
Find a way to account for player sprite offset
in the formula so we can get xview = 0 and xview = 80
*/

range = 320;
view_width = 240;
spd_x_init = spd_x;
event_user(0);
view_xview[0] = ((range - view_width) * 0.5) - xo;
view_yview[0] = y - yo;
xview = view_xview[0];
yview = view_yview[0];
event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_ctrl_clear) then exit;

// Generating the formula variables
// no matter the x position in room should be between 0-320
if instance_exists(obj_player)
then player_rp = (obj_player.x - x) // 2P mode: lerp(player1.x,player2.x,0.5) - x
else player_rp = range / 2;
player_pc = player_rp / range; // player position as decimal percentage
max_width = range - view_width; // 80 assuming playable area of 320 wide

// Scrolling
for (i=0;i&lt;array_length_1d(objects_to_scroll);i++)
    {
    with objects_to_scroll[i]
        {
        x += spd_x;
        y += spd_y;
        }
    }
x += spd_x; 
y += spd_y;

// Bounding omnidirectional speed values within the room
if x &lt; 0 then spd_x = max(x,1)
else if x &gt; room_width then spd_x = -min(x-room_width,1)
else spd_x = spd_x_init;

// Offset check
event_user(0);

// The formula
formula = (x + round(max_width * player_pc)) - xo; // 80 * decimal value as percentage
//formula = round(x + (max_width * player_pc)) - xo; // 80 * decimal value as percentage

if view_xview[0] &lt; formula then view_xview[0] += min(formula-view_xview[0],2);
if view_xview[0] &gt; formula then view_xview[0] -= min(view_xview[0]-formula,2);
view_yview[0] = y - yo;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if range = 640
    {
    range = 320;
    if player_rp &gt; range then x = 320 else x = 0;
    }
else
    {
    range = 640;
    x = 0;
    }*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Object to scroll array
objects_to_scroll[0] = obj_player;
objects_to_scroll[1] = obj_hitbox;
objects_to_scroll[2] = obj_afterimage;
objects_to_scroll[3] = obj_stock_bomb;
objects_to_scroll[4] = obj_en_air;
objects_to_scroll[5] = obj_bullettarget;
objects_to_scroll[6] = obj_popup;
objects_to_scroll[7] = obj_player_shot;

switch global.shipselect
    {
    case 1:
        {
        objects_to_scroll[8] = obj_xono_shothit;
        objects_to_scroll[9] = obj_xono_laser2;
        break;
        }
    case 2:
        {
        objects_to_scroll[8] = obj_warbird_shothit;
        objects_to_scroll[9] = obj_warbird_laser2;
        objects_to_scroll[10] = obj_warbird_volt;
        break;
        }
    case 3:
        {
        objects_to_scroll[8] = obj_bh_trace;
        objects_to_scroll[9] = obj_bh_traceorb;
        objects_to_scroll[10] = obj_bh_shothit;
        objects_to_scroll[11] = obj_bh_orb;
        break;
        }
    case 4:
        {
        objects_to_scroll[8] = obj_sf_shothit;
        break;
        }
    case 5:
        {
        objects_to_scroll[8] = obj_arxyne_shot2b;
        objects_to_scroll[9] = obj_arxyne_shot2c;
        break;
        }
    }
m_o = array_length_1d(objects_to_scroll);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Offset check
if global.use_new_renderer 
    {
    xo = 0; 
    yo = 0;
    } 
else 
    {
    xo = x_o; 
    yo = y_o;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_set_font(global.fnt_little);
draw_set_alpha(1);
draw_set_halign(fa_right);

draw_set_color(c_black);
draw_rectangle(xview+160,yview,xview+240,yview+35,0);

draw_set_color(c_white);
draw_text(xview+240,yview,"formula = "+string(formula));
draw_text(xview+240,yview+10,"x = "+string(x));
draw_text(xview+240,yview+20,"xview = "+string(view_xview[0]+xo));*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
