<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
DO NOT CREATE DIRECTLY VIA INSTANCE_CREATE.
USE SCR_CAMERA_INIT() INSTEAD!

Global Vars explained:
globalvar left_bound,right_bound,spd_x,spd_y;
left_bound = minimum x position of view
right_bound = maximum x position of view
spd_x = the horizontal speed you want
spd_y = the vertical speed you want
*/
event_user(0); // Loading of needed objects to scroll with view
wobble_spd = 1;
spd_x_init = spd_x;
// Update view
x = obj_ctrl_game.x-120;
view_xview[0] = x-x_o;
view_yview[0] = y-y_o;
// Update view (xview has additional wobblescroll formula)
/*if max_w &gt; 240 then w = max_w/(max_w-240) else w = max_w;
view_xview[0] = x+floor((obj_ctrl_game.x - x)/w)-x_o;
view_yview[0] = y-y_o;*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Main behaviour
if instance_exists(obj_ctrl_clear) then exit;

// determine target and wobble speed to use
var diag;//,alive
if instance_exists(obj_player)
    { 
    var spd,d_spd;
    if global.button3
        {
        spd = 1//global.slowshipspeed;
        d_spd = 0.6;//global.sldiagspeed;
        }
    else
        {
        spd = 1.4;//global.shipspeed;
        d_spd = 1;//global.diagspeed;
        }
    // if diagonally moving use diag speed for wobble formula, else normal speed
    /*if (global.jup &amp;&amp; global.jleft) || (global.jup &amp;&amp; global.jright)
    || (global.jdown &amp;&amp; global.jleft) || (global.jdown &amp;&amp; global.jright)
    then wobble_spd = d_spd;//-0.66;
    else*/ wobble_spd = spd;//-0.66;
    }
else 
    {
    //alive = 0;
    wobble_spd = 1.4;
    }

// actually doing the wobble scroll
if left_bound != right_bound // if scrolling not disabled
    {
    if instance_exists(obj_player)
        {
        if global.jleft &amp;&amp; x &gt; left_bound then x -= (wobble_spd);
        if global.jright &amp;&amp; x &lt; right_bound then x += (wobble_spd);
        }
    else
        {
        if x &gt; obj_ctrl_game.x-120 then x -= (wobble_spd);
        if x &lt; obj_ctrl_game.x-120 then x += (wobble_spd);
        }
    }

// Wobble-agnostic Scrolling
if spd_x != 0
    {
    for (i=0;i&lt;m_o;i++) with objects_to_scroll[i] x += spd_x;
    x += spd_x;
    }
if spd_y != 0
    {
    for (i=0;i&lt;m_o;i++) with objects_to_scroll[i] y += spd_y;
    y += spd_y;
    }

// reset spd_x and put controller within boundaries
if x &lt; left_bound then spd_x = min(left_bound-x,1)
else if x &gt; right_bound then spd_x = -min(x-right_bound,1)
else spd_x = spd_x_init;

// clamp to bounds
view_xview[0] = x-x_o;
view_yview[0] = y-y_o;

// update offset-adjusted view vars
scr_view_vars();
/*
// Update view (xview has additional wobblescroll formula) 
if instance_exists(obj_player)
then view_xview[0] = x+floor((obj_hitbox.x - x)/w)-x_o
else if max_w &gt; 240
    {
    if xview &gt; x+floor((max_w-240)/2) then view_xview[0] -= 1;
    if xview &lt; x+floor((max_w-240)/2) then view_xview[0] += 1;
    }
view_yview[0] = y-y_o;

// update offset-adjusted view vars
scr_view_vars();
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objects_to_scroll[0] = obj_player;
objects_to_scroll[1] = obj_hitbox;
objects_to_scroll[2] = obj_afterimage;
objects_to_scroll[3] = obj_stock_bomb;
objects_to_scroll[4] = obj_en_air;
objects_to_scroll[5] = obj_bullettarget;
objects_to_scroll[6] = obj_popup;
objects_to_scroll[7] = obj_player_shot;

switch global.shipselect
    {
    case 1:
        {
        objects_to_scroll[8] = obj_xono_shothit;
        objects_to_scroll[9] = obj_xono_laser2;
        break;
        }
    case 2:
        {
        objects_to_scroll[8] = obj_warbird_shothit;
        objects_to_scroll[9] = obj_warbird_laser2;
        objects_to_scroll[10] = obj_warbird_volt;
        break;
        }
    case 3:
        {
        objects_to_scroll[8] = obj_bh_trace;
        objects_to_scroll[9] = obj_bh_traceorb;
        objects_to_scroll[10] = obj_bh_shothit;
        objects_to_scroll[11] = obj_bh_orb;
        break;
        }
    case 4:
        {
        objects_to_scroll[8] = obj_sf_shothit;
        break;
        }
    case 5:
        {
        objects_to_scroll[8] = obj_arxyne_shot2b;
        objects_to_scroll[9] = obj_arxyne_shot2c;
        break;
        }
    }
m_o = array_length_1d(objects_to_scroll);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
