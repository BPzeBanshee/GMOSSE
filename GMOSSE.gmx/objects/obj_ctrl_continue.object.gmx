<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>9</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enabled = 0; // Start of init
// Pause game/music
scr_pause();
scr_pausemusic(1);
global.pausable = 0;

// Menu control vars
selection = 1;
hook = 1;
alpha = 0;
has_chosen = 0;

// Star aesthetics
limiter = 0;
behaviour_stored = global.behaviour;
global.behaviour = 3;

enabled = 1; // End of init
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* AESTHETICS */
if alpha &lt; 1 &amp;&amp; !has_chosen
    {
    for (i=0;i&lt;8;i+=1;) background_alpha[i] = 0;
    alpha += 0.05;
    exit;
    }
    
limiter += 1;
if limiter &gt; 5
    {
    top = instance_create(random_range(xview,xview+240),yview,obj_star);
    top.side = 1;
    left = instance_create(xview,random_range(yview,yview+320),obj_star);
    left.side = 2;
    bottom = instance_create(random_range(xview,xview+240),random_range(yview+320,yview+325),obj_star);
    bottom.side = 3;
    right = instance_create(random_range(xview+240,xview+245),random_range(yview,yview+320),obj_star);
    right.side = 4;
    limiter = 0;
    }
    
/* BEHAVIOUR */
// Scrolling up
if global.jup &amp;&amp; !hook
    {
    if selection &gt; 1 then selection -= 1;
    hook = 1;
    } 
    
// Scrolling down 
if global.jdown &amp;&amp; !hook
    {
    if selection &lt; 2 then selection += 1;
    hook = 1;
    }
    
// Selecting an option
if global.button1 &amp;&amp; !hook
    {
    has_chosen = 1;
    hook = 1;
    }
    
// Actions based on chosen option
if has_chosen = 1
    {
    alpha -= 0.05;
    if alpha &gt; 0 then exit;
    with obj_ctrl_music timer = 360;
    
    // Unpause and restore everything to look normal
    scr_unpause();
    visible = false; // don't capture continue screen if Game Overing
    
    // make the stars go away/go back to normal
    with obj_star instance_destroy();
    global.behaviour = behaviour_stored;
    
    // Reboot the music
    with obj_ctrl_music event_user(5); // call again to switch off
    scr_pausemusic(0); // Unpause whatever was playing before Continue
    global.pausable = 1;
    
    // Selection-specific stuff
    switch selection
        {
        case 1:
            { // Continue because you're a shit player :3
            lives = 3;
            global.bombs = global.init_bombs;
            global.continues += 1;
            if global.continues &lt; 9 
            then score = global.continues 
            else score = 9;
            global.countdown = 0;
            global.chain = 0;
            obj_ctrl_game.respawntimer = 1;
            obj_hitbox.invincible = 180;
            break;
            }
        case 2:
            { // Game over
            instance_create(x,y,obj_ctrl_gameover);
            break;
            }
        }
        
    // End of need for object, now die
    instance_destroy();
    }
    
// Hook reset
if !global.jup &amp;&amp; !global.jdown
&amp;&amp; !global.jleft &amp;&amp; !global.jright
&amp;&amp; !global.button1 then hook = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !enabled then exit;
scr_view_vars();
draw_set_alpha(alpha);

if alpha &lt; 1
    {
    scr_pause_draw();
    draw_set_color(c_black);
    draw_rectangle(xview,yview,xview+240,yview+320,false);
    }

scr_draw_vars(global.fnt_big,fa_center,c_white);
draw_text(xview+120,yview+96,"Continue?");

draw_set_halign(fa_left);
draw_set_font(global.fnt_default);

draw_set_color(make_color_rgb(150,150,255));
if selection=1 then draw_set_color(make_color_rgb(220,220,255));
draw_text(xview+110,yview+130,"Yes");

draw_set_color(make_color_rgb(150,150,255));
if selection=2 then draw_set_color(make_color_rgb(220,220,255));
draw_text(xview+110,yview+140,"No");

switch selection
    {
    case 1: draw_sprite(spr_shipselect,-1,xview+95,yview+135); break;
    case 2: draw_sprite(spr_shipselect,-1,xview+95,yview+145); break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
