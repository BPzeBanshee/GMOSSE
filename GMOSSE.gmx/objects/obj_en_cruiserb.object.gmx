<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_en_cruiser</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phase = 1;
exptimer = 0;
made = 0;
hscroll = 0;
blend = c_white;

// default turret choices
p[0,2] = obj_en_tur1;
p[1,2] = obj_en_tur1;
p[2,2] = obj_en_spawner;
p[3,2] = obj_en_spawner;
p[4,2] = obj_en_tur1;
p[5,2] = obj_en_tur1;

// enemy value to set to enemy spawners
for (i=0;i&lt;=5;i+=1) spawner_en[i]=0;

spawner_en[2] = obj_en5b;
spawner_en[3] = obj_en5b;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// kill remaining turrets
for (i=0;i&lt;=2;i+=1) //turret[i]
    {
    for (j=0;j&lt;=m[i];j+=1) //turret[i,j]
        {
        if instance_exists(turret[i,j])
        then with turret[i,j] instance_destroy();
        }
    }
        
// only play 'big boom' if actually dying
if instance_exists(box) then with box instance_destroy()
else scr_playsnd(snd_exp3,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// aesthetics
thr = scr_basicshot(x,y+sprite_height/2-5,obj_en_thr,8,270);
thr.image_xscale = 6;
thr.image_yscale = 6;
thr.image_angle = random(360);
thr.depth = depth+1;

//if y &lt; yview-(sprite_height/2) exit;

// update turret point vars
event_user(0);

// Pod creation
if !made
    {
    b=0; 
    for (i=0;i&lt;=2;i+=1) 
        {
        for (j=0;j&lt;=m[i];j+=1) 
            {
            turret[i,j]=instance_create(p[b,0],p[b,1],p[b,2]);
            turret[i,j].visible = 1;
            turret[i,j].active = 1;
            
            // set directions left or right depending on side of carrier
            if b = 0 || b = 2 || b = 4 
            then turret[i,j].direction = 180
            else turret[i,j].direction = 0;
            
            // pass through enemy to spawn for enemy spawners
            if p[b,2] = obj_en_spawner
                {
                dead[i,j]=1;
                turret[i,j].spawn = spawner_en[b];
                }
            else dead[i,j]=0;
            b += 1; // increment loop
            }
        }
        
    // create hitbox (top part of the carrier that can be killed by player)
    box = instance_create(x,(y-sprite_height/2),obj_cruiser_hitbox);
    box.parent = (self).id;
    made = 1;
    }    

// movement handling
if hscroll=1 then hspeed = background_hspeed[0];
switch phase
    {
    case 1:
        {
        if y &lt; yview-48 then y += 0.5 else y += 0.25;
        if made then if (dead[2,0]) &amp;&amp; (dead[2,1]) then phase = 2;
        break;
        }
    case 2:
        {
        if y &lt; yview+48 then y += 0.5 else y += 0.25;
        if (dead[1,0]) &amp;&amp; (dead[1,1]) then phase = 3;
        break;
        }
    case 3:
        {
        if y &lt; yview+160 then y += 0.5 else y += 0.25;
        break;
        }
    }

// Death handling
if y &gt; yview+320+(sprite_height/2) then instance_destroy();
if !instance_exists(box) &amp;&amp; made
    {
    // Set everything that's still alive red
    image_blend = c_red;
    for (i=0;i&lt;=2;i+=1) //turret[i]
        {
        for (j=0;j&lt;=m[i];j+=1) //turret[i,j]
            {
            if instance_exists(turret[i,j]) 
            then turret[i,j].image_blend = c_red;
            }
        }
        
    // explosion + limit explosion sfx
    instance_create(x+random_range(-75,75),y+random_range(-168,168),obj_explosion);
    if exptimer = 0
        {
        scr_playsnd(snd_exp1,1);
        exptimer = 5;
        }
    exptimer -= 1;
    
    // move down and die
    vspeed += 0.05;
    }
else // if still alive
    {
    if !made exit;
    // set craters to colour of ship if ship colour has changed
    if image_blend != blend then 
    for (i=0;i&lt;=2;i+=1) //turret[i]
        {
        for (j=0;j&lt;=m[i];j+=1) //turret[i,j]
            {
            if instance_exists(turret[i,j]) &amp;&amp; dead[i,j]
            then turret[i,j].image_blend = image_blend;
            }
        }
    blend = image_blend;
    }
    
// MOVEMENT COMPLETE - SYNC EVERYTHING ELSE TO ITS POSITION
//draw_self2();
if made = 1
    {
    if instance_exists(box) // update hitbox
        {
        box.x = x;
        box.y = y-sprite_height/2;
        }
    
    b = 0;
    for (i=0;i&lt;=2;i+=1) //turret[i]
        {
        for (j=0;j&lt;=m[i];j+=1) //turret[i,j]
            {
            if instance_exists(turret[i,j])
                {
                turret[i,j].x = p[b,0];
                turret[i,j].y = p[b,1];
                //with turret[i,j] draw_self2();
                }
            else
                {
                var ctype;
                ctype = obj_crater4;
                turret[i,j] = instance_create(p[b,0],p[b,1],ctype);
                turret[i,j].visible = 1;
                dead[i,j] = 1;
                //with turret[i,j] draw_self2();
                }
            b += 1; // update totalnumber
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Array storing maximum amount of values in p[x]
//p[0] = top, p[1] = middle, p[2] = bottom
//p[side,0] = x, p[side,1] = y, p[side,2] = enemy object
m[0]=1; m[1]=1; m[2]=1;

p[0,0] = x - 40;     p[0,1] = y - 96;       
p[1,0] = x + 40;     p[1,1] = y - 96;
       
p[2,0] = x - 40;     p[2,1] = y;            
p[3,0] = x + 40;     p[3,1] = y;      
      
p[4,0] = x - 40;     p[4,1] = y + 96;       
p[5,0] = x + 40;     p[5,1] = y + 96;       
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
