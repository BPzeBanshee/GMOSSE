<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/****************** METHOD 4 ******************/
//CREATE CODE
/*qqx=ds_queue_create();
qqy=ds_queue_create();

//BEGIN STEP CODE
if global.morto = 1 then exit;
length = 10 * number;
if global.moving = 1 
    { 
    ds_queue_enqueue(qqx,obj_ship.x);
    ds_queue_enqueue(qqy,obj_ship.y);
    size += 1;
    } 
if size &gt; length
    { 
    x = ds_queue_head(qqx);
    y = ds_queue_head(qqy);
    ds_queue_dequeue(qqx);
    ds_queue_dequeue(qqy);
    size -= 1;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************** METHOD 3 *************************/
//END STEP EVENT 
/*if optnum = 0 then length = 18;
if optnum = 1 then length = 18*2;
if optnum = 2 then length = 18*3;
if optnum = 3 then length = 18*4;

if ship.x != ship.xprevious+global.viewhspeed 
or ship.y != ship.yprevious 
then ds_queue_enqueue(dsqx,ship.x);

if ship.x != ship.xprevious+global.viewhspeed 
or ship.y != ship.yprevious 
then ds_queue_enqueue(dsqy,ship.y);
    
xlast = ds_queue_tail(dsqx);
if (ds_queue_size(dsqx) + ds_queue_size(dsqy)) / 2 &gt; length
    { 
    x = ds_queue_head(dsqx);
    y = ds_queue_head(dsqy);
    ds_queue_dequeue(dsqx);
    ds_queue_dequeue(dsqy);
    aa = ds_queue_head(dsqx); 
    } 
x = x + global.viewhspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/************************** METHOD 2 ***************************/
/* yes i know how to do it, 
i was just trying to give you an easier solution.
the ship will need to keep track of a list of x/yprevious values.
set up a 2d array of values, the longer the array, 
the further distance the option will follow you at.*/

/*for (i=0; i&lt;10; i+=1)
    {
    previous[i,0] = x;
    previous[i,1] = y;
    }*/

/* then to update the list, you have to go through it 
backwards giving each position the value of the next position. 
then update the first position with the actual x/yprevious values.
but you have to make sure it only does this when the player moved, 
otherwise the option will end up on top of the ship 
of you stop moving for 10 steps. */

/*if x != xprevious || y != yprevious
    {
    for (i=10; i&gt;1; i-=1;)
        {
        previous[i,0] = previous[i-1,0];
        previous[i,1] = previous[i-1,1];
        }
    previous[0,0] = xprevious;
    previous[0,1] = yprevious;
    }

// then set the option to the last position in the list
option.x = previous[9,0];
option.y = previous[9,1];*/

/* thats the basic idea, just 
adjust the numbers until it fits what you want. */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/************************ METHOD 1 ************************/
/*if x != xprevious or y != yprevious 
    { 
    i=0;
    while(i&lt;30)
        { 
        if i!=29 
            {
            xofoption[i] = xofoption[i+1];
            yofoption[i] = yofoption[i+1];
            } 
        else 
            {
            xofoption[i] = x; 
            yofoption[i] = y;
            } 
        i+=1;
        } 
    } 
option.x = xofoption[0];
option.y = yofoption[0];*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* 
I searched these and found these at various threads at YoYoGames' 
forums but unfortunately I forgot who precisely posted them.
Thanks Yoyogames and forum members who contributed these.
Busterhawk would not have been possible without Google + YoYoGames.
~BP
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
