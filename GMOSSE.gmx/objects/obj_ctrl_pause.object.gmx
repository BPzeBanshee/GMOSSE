<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Menu variable initialisation
selection = 1;
hook = 1;
enabled = 0;
s2 = 0;
if global.nextroom = room &amp;&amp; room != global.startstage &amp;&amp; room != rm_tutorial
then restart_locked = 1 else restart_locked = 0;

scr_pause();
enabled = 1;

// Pause music/GMFMODSimple sfx
scr_pausemusic(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !enabled then exit;

// *************** Input Checking ***************
// Resetting Hook
if !global.jup &amp;&amp; !global.jdown 
&amp;&amp; !global.jleft &amp;&amp; !global.jright
&amp;&amp; !global.button1 &amp;&amp; !global.button2
&amp;&amp; !global.button3 &amp;&amp; !global.button4
&amp;&amp; enabled
then hook = 0;

// Up
if (global.jup &amp;&amp; !hook &amp;&amp; enabled)
    {
    scr_playsnd(snd_click,1);
    hook = 1;
    selection -= 1; // Scroll up on the menu.
    if selection &lt; 1 then selection = 5; // Goes to the bottom box.
    }

// Down
if (global.jdown &amp;&amp; !hook &amp;&amp; enabled)
    {
    scr_playsnd(snd_click,1);
    hook = 1;
    selection += 1; // Scroll down on the menu.
    if selection &gt; 5 then selection = 1; // Goes to the top box.
    }

// Button 1
if (global.button1 &amp;&amp; !global.levelend &amp;&amp; !hook &amp;&amp; enabled)
    {
    hook = 1;
    scr_playsnd(snd_click,1);
    switch selection 
        {
        case 1: // resume game
            {
            scr_pausemusic(0);
            scr_unpause();
            instance_destroy();
            break;
            }
        case 2: // restarting room
            {
            if restart_locked exit; // Do not allow restarts after stage 1
            scr_pausemusic(0);
            scr_stopallmusic();
            scr_trans(room,2,c_black,0.025,0.05,0);
            if global.nextroom = rm_stage1
                {
                global.score_stored = 0;
                global.extend_number = 1;
                global.lives_stored = 3;
                global.bombs_stored = global.init_bombs;
                global.chain = 0;
                global.countdown = 0;
                obj_ctrl_game.respawntimer = -1;
                obj_ctrl_game.deathtimer = 0;
                }
            break;
            }
        case 3: // restarting and going to Ship Selection menu
            {
            scr_pausemusic(0);
            scr_stopallmusic();
            scr_trans(rm_shipselect,2,c_black,0.025,0.05,0);
            with obj_ctrl_music gameover = 1; // Free generic music
            break;
            }
        case 4: // going to Config menu
            {
            instance_create(xview,yview,obj_ctrl_config);
            enabled = 0;
            break;
            }
        case 5: // exiting to Main Menu
            {
            scr_pausemusic(0);
            scr_stopallmusic();
            scr_trans(rm_menu,2,c_white,0.025,0.05,0);
            with obj_ctrl_music gameover = 1; // Free generic music
            break;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.update exit;
scr_unpause();
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_pause_draw();

// Drawing the pause menu options and cursor
if !enabled exit;
draw_set_font(global.fnt_default);
draw_set_halign(fa_left);
draw_set_alpha(1);
draw_set_color(8454016);

draw_sprite(spr_pause,-1,xview+120,yview+135);

draw_set_color(make_color_rgb(50,50,50)); draw_set_alpha(0.5);
draw_rectangle(xview+30,yview+110,xview+210,yview+220,0);
draw_set_color(8454016); draw_set_alpha(1);

draw_text(xview+60,yview+160,"RESUME GAME");
if restart_locked = 1 then draw_set_color(c_red);
draw_text(xview+60,yview+170,"RESTART LEVEL");
if restart_locked = 1 then draw_set_color(8454016);
draw_text(xview+60,yview+180,"RETURN TO SHIP SELECT");
draw_text(xview+60,yview+190,"CONFIGURATION");
draw_text(xview+60,yview+200,"EXIT TO MAIN MENU");

switch selection 
    {
    case 1: draw_sprite(spr_shipselect,-1,xview+45,yview+165); break;
    case 2: draw_sprite(spr_shipselect,-1,xview+45,yview+175); break;
    case 3: draw_sprite(spr_shipselect,-1,xview+45,yview+185); break;
    case 4: draw_sprite(spr_shipselect,-1,xview+45,yview+195); break;
    case 5: draw_sprite(spr_shipselect,-1,xview+45,yview+205); break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
