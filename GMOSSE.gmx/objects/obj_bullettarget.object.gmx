<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If the bullet leaves the screen, destroy itself.  
if (x &lt; xview-sprite_width/2) || (x &gt; xview+240+sprite_width/2) 
|| (y &lt; yview-sprite_width/2) || (y &gt; yview+320+sprite_width/2) 
then instance_destroy(); 

if global.bulletcolour=2
    {
    // change to red sprite
    if sprite_index != sprite_alt then sprite_index = sprite_alt;
    }
    
if global.bulletcolour=3
    {
    // Filter out child objects that don't need to do this.
    if object_index = obj_bullet_shoot 
        {
        if sprite_index != sprite_alt then sprite_index = sprite_alt; 
        }
    
    // Change sprite if on collision line with player
    col = collision_line(x,y,x+lengthdir_x(240,direction),y+lengthdir_y(240,direction),obj_player,0,0);
    if col &gt; -1 || distance_to_object(obj_hitbox) &lt; 40   
        {
        if sprite_index != sprite_alt then sprite_index = sprite_alt;
        }
    else sprite_index = sprite_def;
    }

/*if collision_tile(1000000,vk_right)
|| collision_tile(1000000,vk_left)
|| collision_tile(1000000,vk_up)
|| collision_tile(1000000,vk_down)
then event_perform(ev_collision,obj_en_wall);*/
/*
// This draws a line and is used in Draw event for testing purposes.
// Don't use for proper game design unless you want something pointlessly
// expensive in terms of resources to play.
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
// /\ GM 8.0 equivalent of draw_self, only needed if using draw functions
draw_set_color(c_red);
draw_set_alpha(0.25);
draw_line_width(x,y,x+lengthdir_x(240,direction),y+lengthdir_y(240,direction),sprite_width);
// /\ draws line showing trajectory
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_en_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_change(obj_bulletcancel,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
