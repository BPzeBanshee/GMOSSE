<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>derp = 0;
screenshotnum = 0;

// Find preferred ID if there's multiple devices connected
// New system
if gamepad_get_device_count() &gt; 1 &amp;&amp; gamepad_is_connected(global.joy_pref)
    {
    show_debug_message("obj_ctrl_input: locking in preferred joystick id");
    global.joy_id = global.joy_pref;
    global.joy_system = 2;
    }
// old system
else if joystick_exists(1) &amp;&amp; joystick_exists(2) &amp;&amp; global.joy_pref &lt; 2
    {
    show_debug_message("obj_ctrl_input: fell back to joystick_exists");
    if joystick_exists(global.joy_pref)
        {
        global.joy_id = global.joy_pref+1;
        global.joy_system = 1;
        }
    }
else 
    {
    scr_detect_joys(); // only one device? okay we'll find the first one and accept it
    show_debug_message("obj_ctrl_input: fell back again, should be calling scr_detect_joys()");
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_ctrl_rebind) then exit;

// obj_player calls scr_input for hopefully reduced lag
if !instance_exists(obj_player) || !instance_exists(obj_hitbox) 
then scr_input();

// Creates Pause object if button4 is pressed, game is not paused already and is allowed
if global.button4 &amp;&amp; global.pausable 
&amp;&amp; !instance_exists(obj_ctrl_pause)
then instance_create(0,0,obj_ctrl_pause);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controller Hotplug Support
/*
System Event

Taken from YoYoGames' Twin Stick Shooter example code
modified to work with GMOSSE by BPzeBanshee
*/

// Debug code so you can see which event has been
// triggered and the pad associated with it.
show_debug_message("Event = " + async_load[? "event_type"]);        
show_debug_message("Pad = " + string(async_load[? "pad_index"]));   

// Parse the async_load map to see which event has been triggered
switch(async_load[? "event_type"]) 
    {
    case "gamepad discovered": 
        {
        // Get the pad index value from the async_load map
        var pad = async_load[? "pad_index"];
        if global.joy_pref = pad
            {
            global.joy_id = pad;
            global.joy_system = 2;
            }
        
        // Set the deadzone for the analog stick and triggers
        //gamepad_set_axis_deadzone(pad,global.deadzone);    
        gamepad_set_button_threshold(pad,global.deadzone);
        break;
        }
    case "gamepad lost":
        {
        // Get the pad index
        var pad = async_load[? "pad_index"];       
        if global.joy_id = pad then scr_detect_joys(); // fall back on detect joys script
        break;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if USE_SANDBOX=0
    {
    FS_file_delete(global.main_dir+"\score.gmes");
    //FS_file_delete(global.main_dir+"\unlock.zd2");
    
    // this file only appears in devtests
    if FS_file_exists(global.main_dir+"\config.ini")
    then FS_file_delete(global.main_dir+"\config.ini");
    }*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="120">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var d,m,ye,h,mi,s,st;
d = date_get_day(date_current_datetime());
m = date_get_month(date_current_datetime());
ye = date_get_year(date_current_datetime());
h = date_get_hour(date_current_datetime());
mi = date_get_minute(date_current_datetime());
s = date_get_second(date_current_datetime());

st = program_directory+"\"+
string(d)+"-"+string(m)+"-"+string(ye)+"_"
+string(h)+"-"+string(mi)+"-"+string(s)+".bmp";
screen_save(st);
//show_message(st);
//FS_screen_save(st);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Make global.fullscreen the reverse
// of whatever it currently is, then
// use the function with the given value.
if keyboard_check_direct(vk_ralt) or keyboard_check_direct(vk_lalt) exit;

if window_get_fullscreen() = global.fullscreen 
then global.fullscreen = !global.fullscreen;
scr_fullscreen(global.fullscreen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.update = 1;
scr_main_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.update = 1;
game_end();
// this stops obj_ctrl_music attempting to load music when game is ending
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
