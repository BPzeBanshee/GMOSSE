<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enabled = true; // toggle this to false to disable universal input
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// do nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// do nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !enabled then exit;
scr_input();

// Creates Pause object if button4 is pressed, game is not paused already and is allowed
if global.button4 &amp;&amp; global.pausable 
&amp;&amp; !instance_exists(obj_ctrl_pause)
then instance_create(0,0,obj_ctrl_pause);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controller Hotplug Support
/*
System Event

Portions of this code taken from YoYoGames' Twin Stick Shooter example code
modified to work with GMOSSE by BPzeBanshee
*/

// Precaution to preserve joystick/gamepad state if disabled
if !enabled then exit;

// Debug code so you can see which event has been triggered
scr_console("Event: " + async_load[? "event_type"]);        

// Parse the async_load map to see which event has been triggered
switch(async_load[? "event_type"]) 
    {
    case "gamepad discovered": 
        {
        // Get the pad index value from the async_load map
        var pad;
        pad = async_load[? "pad_index"];
        scr_console("Pad ID: " + string(pad));
        
        // If multiple pads are connected, pick the preferred one defined via config
        if gamepad_get_device_count() &gt; 1
            {
            if global.joy_pref == pad
                {
                global.joy_id = pad;
                scr_console("Pad set to preferred ID "+string(pad)+" ("+string(gamepad_get_description(pad))+")");
                }
            }
        else 
            {
            global.joy_id = pad; // otherwise if it's the only pad, use it
            scr_console("Pad set to only available ID "+string(pad)+" ("+string(gamepad_get_description(pad))+")");
            }
        
        // Set the deadzone for the analog stick and triggers
        //gamepad_set_axis_deadzone(pad,global.deadzone); // not needed, done manually
        
        // used for certain triggers like DualShock4 L2/R2, needs alt variable of some kind
        //gamepad_set_button_threshold(pad,global.deadzone); 
        break;
        }
    case "gamepad lost":
        {
        // Get the pad index
        var pad = async_load[? "pad_index"];
        scr_console("Pad ID: " + string(pad));
        
        // If lost pad is currently used/preferred, find us a new one!
        if global.joy_id == pad
            {
            global.joy_id = -1; // Nuke old ID
            
            var pad,count; 
            pad = 0; 
            count = 0;

            // Try to find and pick the first available gamepad
            while pad &lt; gamepad_get_device_count()
                {
                if gamepad_is_connected(pad) 
                    {
                    if global.joy_id = -1 then global.joy_id = pad;
                    count += 1;
                    }
                pad += 1;
                }
                
            // Report result to console
            if pad == gamepad_get_device_count() &amp;&amp; global.joy_id == -1
            then scr_console("Failed to find any joystick/gamepads")
            else scr_console(string(count)+" Pads found, picked ID: "+string(global.joy_id));
            }
        break;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if USE_SANDBOX=0
    {
    file_delete_ns(global.main_dir+"\score.gmes");
    
    // this file only appears in devtests
    if file_exists_ns(global.main_dir+"\config.ini")
    then file_delete_ns(global.main_dir+"\config.ini");
    }*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="120">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SAVE SCREENSHOT
var dir,f;
f = scr_timestr()+".png";
dir = global.main_dir+"\"+f;

if !global.use_new_renderer
    {
    // Thanks for making me do this GMS 1.4.9999, you c#$%. -BP
    var a,xx,yy,ww,hh;
    a = application_get_position();
    xx = a[0];
    yy = a[1];
    ww = a[2] - a[0];
    hh = a[3] - a[1];
    if window_get_fullscreen()
        {
        ww += xx;
        hh += yy;
        }
    screen_save_part(dir,xx,yy,ww,hh);
    }
else screen_save_part(dir,0,0,window_get_width(),window_get_height());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// TOGGLE FULLSCREEN
// Not if alt keys are pressed, that'll terminate the game! :P
if keyboard_check_direct(vk_ralt) or keyboard_check_direct(vk_lalt) exit;

if window_get_fullscreen() = global.fullscreen 
then global.fullscreen = !global.fullscreen;
scr_fullscreen(global.fullscreen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// RESET GAME
scr_main_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EXIT GAME
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
