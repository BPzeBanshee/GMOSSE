<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bullet6</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xx = x;
yy = y;
moving = false;
pos = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if device_mouse_check_button(0,mb_left) &amp;&amp; !moving
    {
    moving = true;
    image_speed = 0.5;
    pos += 1; if pos &gt; 4 then pos = 0;
    switch pos
        {
        case 0: xx = 40; yy = 40; break;
        case 1: xx = 40; yy = 280; break;
        case 2: xx = 200; yy = 280; break;
        case 3: xx = 200; yy = 40; break;
        case 4: xx = 120; yy = 160; break;
        }
    }
    
if moving
    {
    /*
    This works well enough but very arbitrary about speed values.
    Current mechanism does not allow for setting forced min/max values,
    to do so would require putting the lerps into some other variables
    and then containing them somehow.
    
    Zenodeath's mechanism works like this:
    if x != xx || y != yy
        {
        var s;
        s = clamp(point_distance(x,y,xx,yy)/4,0.1,5);
        mp_linear_step(xx,yy,s,0);
        }
    */
    
    x = lerp(x,xx,0.1);
    y = lerp(y,yy,0.1);
    if round(x) = xx &amp;&amp; round(y) = yy
        {
        x = xx;
        y = yy;
        image_speed = 0;
        moving = false;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
