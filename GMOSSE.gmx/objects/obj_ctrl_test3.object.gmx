<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_ctrl_stage</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
TEST 3: DYNAMICALLY ALTERING WOBBLE SCROLL VALUE
Useful for alternate stage segments depending
on player travel.
Example game: https://youtu.be/VBCgCGYVE2o?t=33

TODO: Figure out formula to reset controller's
x position after max_w is reset to &gt;240.
If 240 is used with just x = view_xview[0] its
seamless but the offset for the wobblescroll
formula is causing issues.
*/

global.omake_enabled = 0;
stage_time = 0;
completedelay = 0;

scr_camera_init(room_width,0,-0.5);
b = -1;
s = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Updating position
x = obj_ctrl_camera.x;
y = obj_ctrl_camera.y;

// Boundary checking
if y &lt;= 0
    {
    obj_ctrl_camera.y = 0;
    scr_camera_spd(0,0);
    }
if x &gt; room_width-320
    {
    obj_ctrl_camera.x = room_width-320;
    scr_camera_spd(0,-0.5);
    }
if x &lt; 0
    {
    obj_ctrl_camera.x = 0;
    scr_camera_spd(0,-0.5);
    }
    
/*if keyboard_check(ord("W")) then scr_camera_spd(0,0,-1,2);
if keyboard_check(ord("S")) then scr_camera_spd(0,0,1,2);
if keyboard_check(ord("A")) then scr_camera_spd(-1,2,0,0);
if keyboard_check(ord("D")) then scr_camera_spd(1,2,0,0);*/

if y = room_height/2
    {
    if obj_hitbox.x &lt; room_width/2 then b = 0 else b = 1;
    }
if b &gt; -1 &amp;&amp; max_w &gt; 320
    {
    // TODO: the following line doesn't work well with max_w &gt; 240
    obj_ctrl_camera.x = obj_player.x-view_xview[0];
    max_w = 320;
    if b = 0 then scr_camera_spd(-0.5,-0.5);
    if b = 1 then scr_camera_spd(0.5,-0.5);
    b = -1;
    with obj_ctrl_camera if max_w &gt; 240 then w = max_w/(max_w-240) else w = max_w;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
