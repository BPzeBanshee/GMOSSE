<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_warbird_laser</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>obj_player_shot</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
timer = 0;
attacktarget = obj_player;
turnrate = 20; 
angle = 90;
lock = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Aesthetics
image_angle = direction;
trace = instance_create(x,y,obj_warbird_laser2);
trace.image_angle = image_angle;

// Change from player target to enemy
timer += 1;
if timer = 30 then attacktarget = obj_en_parent;

// Turning laser behaviour
if instance_exists(attacktarget)
    {
    target = instance_nearest(x,y,attacktarget);
    angle = point_direction(x,y,target.x,target.y);
    }
else angle = 90;
scr_turntoangle(angle,turnrate);
/*if instance_exists(attacktarget)
    {
    lock = 1;
    target = instance_nearest(x,y,attacktarget);
    scr_turntoangle(point_direction(x,y,target.x,target.y),turnrate);
    if direction != point_direction(x,y,target.x,target.y)  
        {
        if turnrate &lt; max_turnrate then turnrate += 1;
        }
    else 
        {
        if turnrate &gt; min_turnrate then turnrate -= 1;    
        }
    }
else
    {
    lock = 0;
    scr_turntoangle(90,turnrate);
    }*/
    
// Outside room check
if x &lt; xview-sprite_width || x &gt; xview+240+sprite_width
|| y &lt; yview-sprite_width || y &gt; yview+336+sprite_width
then instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_en_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s = instance_create(x,y,obj_warbird_shothit);
s.image_xscale = 0.75;
s.image_yscale = 0.75;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
