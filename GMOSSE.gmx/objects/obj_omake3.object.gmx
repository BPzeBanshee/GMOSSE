<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_omake3</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_en_air</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* |&lt;I|_|_J&lt;&gt;y |\/||&lt; || */
// Compulsory (health, z-handling, etc)
enemyHP = 1000; 
event_inherited();
timeout = 9999;

// Enemy timing
phase = 0;
timer = 0;
atk_timer = 0;

// Arm handling
made = 0;
arm_left = -1;
arm_right = -1;
arms_dead = 0;
d1 = 0; d2 = 0;
b = 0; 

// Leg handling
legs = instance_create(x,y,obj_omake3_legs);
legs.image_angle = image_angle;

// Movement-related
image_angle = 270;
direction = 270;
speed = 5;
speed_max = -1;

// Set healthbar on and start music
with obj_ctrl_music event_user(13);
scr_create_healthbar();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(legs) then with legs instance_destroy();
if instance_exists(arm_left) then with arm_left instance_destroy();
if instance_exists(arm_right) then with arm_right instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update leg position
legs.x = x;
legs.y = y;
legs.image_angle = image_angle;

// Inherited enemy behaviour
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* 
/\&gt;&lt;3|&lt;I|_|_J&lt;&gt;y |\/||&lt; || , by BPzeBanshee
       (Omake 3 - AXEKILLJOY MK-II)
            
Summary of its parts:
* Body
- left arm
- right arm
- legs
both arms use obj_omake3_arm, no plans on doing Batrider Grubby bullshit
"head" is part of the body at exact center
legs is separate purely for depth trickery and nothing else

Control variables:
d1/d2 is offset from body angle + 90 degrees left/right from center
- left arm uses d1, right d2
by manipulating these variables individually you can make crude hand signal behaviour
            
Code blocks in order:
* Aesthetic code
* Boss orientation
* Attack phase
    - phase 0 is intro
    - will cycle through phase 1-3
    - will cycle through phase 2-4? on &lt;=50% health
*/

/* 
AESTHETIC CODE

Only significant thing I have here for the body is the single thruster
on it's back. The rest I have delegated to the arm code in event_user(0) for now.
*/
var thr;
thr = scr_basicshot(x,y,obj_explosion,5,image_angle+180+random_range(-10,10));
thr.depth = depth + 1;
thr.image_xscale = 0.25;
thr.image_yscale = 0.25;

/*
BOSS ORIENTATION

This part maintains the var aim to be the aim of the player hitbox
position according to the head of omake3 as well as the creation 
and updating of the two arms.
*/
// Main body
p = instance_nearest(x,y,obj_hitbox);
if instance_exists(p)
then scr_turntoimageangle(point_direction(x,y,p.x,p.y),2);
aim = image_angle;

// Update position variables for arms and arm pieces
x1 = x+lengthdir_x(36,aim+270); // left shoulder
y1 = y+lengthdir_y(36,aim+270);
x2 = x+lengthdir_x(36,aim+90); // right shoulder
y2 = y+lengthdir_y(36,aim+90);

if made = 0 // Create the arms
    {
    arm_left = instance_create(x1,y1,obj_omake3_arm);
    arm_right = instance_create(x2,y2,obj_omake3_arm);
    arm_left.direction = image_angle; arm_left.image_yscale = -1;
    arm_right.direction = image_angle;
    made = 1;
    }
else
    {
    // Left arm
    if instance_exists(arm_left)
        {
        arm_left.x = x1; arm_left.y = y1;
        arm_left.direction = image_angle+d1;
        }
    else
        {
        var e;
        e = scr_basicshot(x1,y1,obj_explosion,5,aim+270+random_range(-30,30));
        e.depth = depth + 1;
        e.image_xscale = 0.5;
        e.image_yscale = 0.5;
        }
    // Right arm
    if instance_exists(arm_right)
        {
        arm_right.x = x2; arm_right.y = y2;
        arm_right.direction = image_angle+d2;
        }
    else 
        {
        var e;
        e = scr_basicshot(x2,y2,obj_explosion,5,aim+90+random_range(-30,30));
        e.depth = depth + 1;
        e.image_xscale = 0.5;
        e.image_yscale = 0.5;
        }
    }

/*
ATTACK PATTERNS

I split this out into event_user calls for the sake of simplicity.
Manipulating patterns is hard enough without scrolling through a bunch
of aesthetic code and it's easier to look at stuff on a per-phase basis.
*/
event_user(phase);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_fade)
then scr_fademusic(0.005);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// PATTERN 3: DOOM (placeholder)
// Reposition if necessary
if x != 160 || y != yview+65 then mp_linear_step(160,yview+65,0.5,0);

atk_timer += 1;
if atk_timer = 8
    {
    for (i=2;i&lt;=6;i+=1) scr_basicshot(x1,y1,obj_bullet2,i,image_angle+(d1*12));
    for (i=2;i&lt;=6;i+=1) scr_basicshot(x2,y2,obj_bullet2,i,image_angle-(d2*12));
    d1 += 1;
    d2 += 1;
    scr_playsnd(snd_en_shot2,1);
    atk_timer = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// PATTERN 2: TRYING TO BE LIKE XIISTAG ST2 BOSS
atk_timer += 1;
if atk_timer &lt; 30 then direction = image_angle else image_angle = direction;
if atk_timer = 30 then speed = -2;
if atk_timer &gt; 30 &amp;&amp; atk_timer &lt; 90
    {
    speed += 0.1;
    d1 += 0.5;
    d2 -= 0.5;
    }

if atk_timer = 90
    {
    if instance_exists(arm_left) then with arm_left event_user(2);
    if instance_exists(arm_right) then with arm_right event_user(2);
    speed_max = 2;
    speed = -speed;
    }
if atk_timer &gt; 90
    {
    if d1 &gt; 0 then d1 -= 0.5;
    if d2 &lt; 0 then d2 += 0.5;
    if speed &lt; speed_max then speed += 0.1 else 
        {
        speed = 0;
        speed_max = 0;
        }
    }
if atk_timer = 150
    {
    atk_timer = 0;
    if !instance_exists(arm_left) &amp;&amp; !instance_exists(arm_right)
        {
        timer = 0;
        phase = 3;
        }
    }

timer += 1;
if timer = 450
    {
    speed = 0;
    timer = 0;
    atk_timer = 0;
    phase = 1;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// PATTERN 1: WAVE FORMATION
// Reposition if necessary
if x != 160 || y != yview+65 then mp_linear_step(160,yview+65,0.5,0);

timer += 1;
if timer &lt; 180
    {
    // Handle arm directions
    if b = 0 then d1 += 1 else d1 -= 1;
    if d1 &gt; 30 then b = 1;
    if d1 &lt; -30 then b = 0;
    d2 = -d1;

    // Attack timing
    atk_timer += 1;
    if atk_timer = 8
        {
        if instance_exists(arm_right) then with arm_right event_user(1);
        if instance_exists(arm_left) then with arm_left event_user(1);
        if instance_exists(arm_right) || instance_exists(arm_left)
        then scr_playsnd(snd_en_shot1,1);
        atk_timer = 0;
        }
    }
else
    {
    if d1 &gt; 0 then d1 -= 1 else d1 += 1;
    d2 = -d1;
    // Decide when to go to next pattern
    if d1 = 0
        {
        timer = 0;
        atk_timer = 0;
        phase = 2;
        }
    }
    
if !instance_exists(arm_left) &amp;&amp; !instance_exists(arm_right)
    {
    timer = 0;
    atk_timer = 0;
    phase = 3;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INTRODUCTION PHASE
if speed &gt; 0 then speed -= 0.1;
if speed = 0 then phase = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
